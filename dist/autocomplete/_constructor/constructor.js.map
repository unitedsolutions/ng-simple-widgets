{"version":3,"sources":["../../../tmp/autocomplete/_constructor/constructor.ts"],"names":[],"mappings":"AACA,OAAO,EAAA,SAAE,EAAU,KAAA,EAAO,SAAA,EAAU,MAAM,eAAA,CAAgB;AAG1D;IAAA;QAkBE,aAAQ,GAAG,IAAI,CAAC;QAEhB,sBAAiB,GAAG,EAAE,CAAC;IA6EzB,CAAC;IA5EM,gCAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;oBACxB,QAAQ,EAAE,wBAAwB;oBAClC,QAAQ,EAAE,qkDA8BT;oBACD,MAAM,EAAE,CAAC,umBA0BR,CAAC;iBACH,EAAG,EAAE;KACL,CAAC;IACF,kBAAkB;IACX,oCAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;IACK,oCAAc,GAA2C;QAChE,KAAK,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;QACzB,MAAM,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;QAC1B,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;QAC3B,aAAa,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;QACjC,cAAc,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;QAClC,cAAc,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;QAClC,MAAM,EAAE,CAAC,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,MAAM,EAAG,EAAE,EAAE;QAChD,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,OAAO,EAAG,EAAE,EAAE;KACjD,CAAC;IACF,4BAAC;CAjGD,AAiGC,IAAA;SAjGY,qBAAqB","file":"constructor.js","sourceRoot":"","sourcesContent":["import * as _                        from 'lodash';\nimport {Component, Input, ViewChild} from '@angular/core';\n\n\nexport class AutocompleteComponent {\n   for;\n   form;\n   items;\n   placeholder;\n   inputClasses;\n   debounceTime;\n   list;\n   input;\n  control;\n  inputEl;\n  listEl;\n  _items;\n  visible;\n  noMatch;\n  loading;\n  timeout;\n  useListCover;\n  noEvents = true;\n  highlightedItem;\n  previousSelection = '';\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'ng-simple-autocomplete',\n  template: `\n    <div class = \"ng-simple-autocomplete\">\n      <input #input class = \"ng-simple-autocomplete-input\" [ngClass] = \"inputClasses\" \n      spellcheck = \"false\" [placeholder] = \"placeholder\" (keyup) = \"keyup($event)\" \n      (focus) = \"filterItems()\" (blur) = \"blur()\" (keydown.arrowDown) = \"highlightByKeys($event)\" \n      (keydown.arrowUp) = \"highlightByKeys($event, false)\" (keydown.escape) = \"reset()\" \n      (keydown.enter) = \"selectItem(); input.blur()\" (keydown.tab) = \"selectItem()\" \n      (keydown) = \"keydown($event)\" />\n  \n      <div class = \"ng-simple-autocomplete-list\" [ngClass] = \"{visible: loading}\">\n        <div class = \"ng-simple-autocomplete-list-item\">\n          <span>loading items...</span>\n        </div>\n      </div>\n  \n      <div #list [ngClass] = \"{visible: visible, 'no-events': noEvents}\"\n      class = \"ng-simple-autocomplete-list\">\n        <div class = \"ng-simple-autocomplete-list-wrapper\" [ngClass] = \"{cover: useListCover}\"\n        (mousemove) = \"useListCover = false\">\n          <div class = \"ng-simple-autocomplete-list-item\" *ngFor = \"let item of _items\" \n          [ngClass] = \"{highlighted: item.highlighted, hidden: item.hidden}\"\n          [innerHtml] = \"item.readableWithMatches || item.readable\" (click) = \"selectItem(item)\" \n          (mouseenter) = \"highlightItem(item)\"></div>\n      \n          <div *ngIf = \"noMatch\" class = \"ng-simple-autocomplete-list-item\">\n            <span>No items matched your input</span>\n          </div>\n        </div>\n      </div>\n    </div>\n  `,\n  styles: [`\n    .ng-simple-autocomplete-list {\n      opacity: 0;\n    }\n    .ng-simple-autocomplete-list.visible {\n      opacity: 1;\n    }\n    .ng-simple-autocomplete-list.no-events {\n      pointer-events: none;\n    }\n    .ng-simple-autocomplete-list-wrapper {\n      position: relative;\n    }\n    .ng-simple-autocomplete-list-wrapper.cover::before {\n      content: \"\";\n      position: absolute;\n      top: 0;\n      right: 0;\n      bottom: 0;\n      left: 0;\n      z-index: 1000;\n      background-color: transparent;\n    }\n    .ng-simple-autocomplete-list-item.hidden {\n      display: none;\n    }\n  `]\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'for': [{ type: Input },],\n'form': [{ type: Input },],\n'items': [{ type: Input },],\n'placeholder': [{ type: Input },],\n'inputClasses': [{ type: Input },],\n'debounceTime': [{ type: Input },],\n'list': [{ type: ViewChild, args: ['list', ] },],\n'input': [{ type: ViewChild, args: ['input', ] },],\n};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}